version: "3.8"

services:
  # React Frontend (개발 서버)
  frontend:
    build:
      context: ./FrontEnd
      dockerfile: Dockerfile
    image: loom-frontend:latest
    container_name: loom-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://backend:8080
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
        reservations:
          cpus: "0.25"
          memory: "256M"
    networks:
      - loom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Spring Boot Backend
  backend:
    build:
      context: ./BackEnd
      dockerfile: Dockerfile
    image: loom-backend:latest
    container_name: loom-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/loom
      - SPRING_DATASOURCE_USERNAME=loom
      - SPRING_DATASOURCE_PASSWORD=loom123!
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/loom
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1024M"
        reservations:
          cpus: "0.5"
          memory: "512M"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - loom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (단일 nginx!)
  nginx:
    image: nginx:alpine
    container_name: loom-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "128M"
    depends_on:
      - frontend
      - backend
    networks:
      - loom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL Database (Named Volumes 사용)
  mysql:
    image: mysql:8.0
    container_name: loom-mysql
    environment:
      MYSQL_ROOT_PASSWORD: loom123!
      MYSQL_DATABASE: loom
      MYSQL_USER: loom
      MYSQL_PASSWORD: loom123!
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1024M"
        reservations:
          cpus: "0.5"
          memory: "512M"
    networks:
      - loom-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-ploom123!",
        ]
      timeout: 20s
      retries: 10
      start_period: 30s

  # Redis Cache (Named Volumes 사용)
  redis:
    image: redis:7-alpine
    container_name: loom-redis
    command: redis-server --appendonly yes --requirepass loom123!
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
    networks:
      - loom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "loom123!", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB (Named Volumes 사용)
  mongodb:
    image: mongo:6
    container_name: loom-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: loom123!
      MONGO_INITDB_DATABASE: loom
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
    networks:
      - loom-network
    restart: unless-stopped

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: loom-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "2048M"
        reservations:
          cpus: "0.5"
          memory: "1024M"
    networks:
      - loom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: loom-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
    networks:
      - loom-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: loom-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
    networks:
      - loom-network
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: loom-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
    networks:
      - loom-network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: loom-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123!
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
    depends_on:
      - prometheus
    networks:
      - loom-network
    restart: unless-stopped

# Named Volumes (검색 결과 [6] 권장)
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  elasticsearch_data:
    driver: local
  kafka_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  loom-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
